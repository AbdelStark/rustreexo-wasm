name: Build WASM Artifacts

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wasm:
    name: Build WASM Packages
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain  
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'

    - name: Extract version
      id: version
      run: |
        VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build WASM for web target
      run: |
        wasm-pack build \
          --target web \
          --out-dir pkg-web \
          --release \
          --scope rustreexo

    - name: Build WASM for Node.js target
      run: |
        wasm-pack build \
          --target nodejs \
          --out-dir pkg-node \
          --release \
          --scope rustreexo

    - name: Build WASM for bundler target
      run: |
        wasm-pack build \
          --target bundler \
          --out-dir pkg-bundler \
          --release \
          --scope rustreexo

    - name: Build WASM for no-modules target
      run: |
        wasm-pack build \
          --target no-modules \
          --out-dir pkg-no-modules \
          --release \
          --scope rustreexo

    - name: Generate package info
      run: |
        echo "# WASM Package Information" > PACKAGE_INFO.md
        echo "" >> PACKAGE_INFO.md
        echo "**Version:** ${{ steps.version.outputs.version }}" >> PACKAGE_INFO.md
        echo "**Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> PACKAGE_INFO.md
        echo "**Commit:** ${{ github.sha }}" >> PACKAGE_INFO.md
        echo "" >> PACKAGE_INFO.md
        echo "## Package Sizes" >> PACKAGE_INFO.md
        echo "" >> PACKAGE_INFO.md
        echo "| Target | WASM Size | JS Size |" >> PACKAGE_INFO.md
        echo "|--------|-----------|---------|" >> PACKAGE_INFO.md
        
        for target in web node bundler no-modules; do
          wasm_size=$(ls -lh pkg-${target}/*.wasm | awk '{print $5}')
          js_size=$(ls -lh pkg-${target}/*.js | awk '{print $5}')
          echo "| ${target} | ${wasm_size} | ${js_size} |" >> PACKAGE_INFO.md
        done
        
        echo "" >> PACKAGE_INFO.md
        echo "## File Checksums" >> PACKAGE_INFO.md
        echo "" >> PACKAGE_INFO.md
        echo '```' >> PACKAGE_INFO.md
        find pkg-* -name "*.wasm" -exec sha256sum {} \; >> PACKAGE_INFO.md
        echo '```' >> PACKAGE_INFO.md

    - name: Upload web package
      uses: actions/upload-artifact@v4
      with:
        name: rustreexo-wasm-web-${{ steps.version.outputs.version }}
        path: |
          pkg-web/
          PACKAGE_INFO.md
        retention-days: 90

    - name: Upload Node.js package
      uses: actions/upload-artifact@v4
      with:
        name: rustreexo-wasm-nodejs-${{ steps.version.outputs.version }}
        path: |
          pkg-node/
          PACKAGE_INFO.md
        retention-days: 90

    - name: Upload bundler package
      uses: actions/upload-artifact@v4
      with:
        name: rustreexo-wasm-bundler-${{ steps.version.outputs.version }}
        path: |
          pkg-bundler/
          PACKAGE_INFO.md
        retention-days: 90

    - name: Upload no-modules package
      uses: actions/upload-artifact@v4
      with:
        name: rustreexo-wasm-no-modules-${{ steps.version.outputs.version }}
        path: |
          pkg-no-modules/
          PACKAGE_INFO.md
        retention-days: 90

    - name: Upload all packages (combined)
      uses: actions/upload-artifact@v4
      with:
        name: rustreexo-wasm-all-targets-${{ steps.version.outputs.version }}
        path: |
          pkg-*/
          PACKAGE_INFO.md
        retention-days: 90

  test-artifacts:
    name: Test Built Artifacts
    runs-on: ${{ matrix.os }}
    needs: build-wasm
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [web, nodejs, bundler]
        exclude:
          # Reduce test matrix - web tests only on Linux
          - os: windows-latest
            target: web
          - os: macos-latest
            target: web

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: rustreexo-wasm-${{ matrix.target }}-${{ needs.build-wasm.outputs.version }}
        path: ./

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      if: matrix.target == 'nodejs'

    - name: Test Node.js package
      run: |
        cd examples
        npm ci
        node -e "
          const pkg = require('../pkg-${{ matrix.target }}/rustreexo_wasm.js');
          console.log('âœ… Package loaded successfully');
          const stump = new pkg.WasmStump();
          console.log('âœ… WasmStump created successfully');
          stump.free();
          console.log('âœ… Memory cleanup successful');
        "
      if: matrix.target == 'nodejs'

    - name: Verify package contents
      run: |
        echo "ðŸ“¦ Verifying ${{ matrix.target }} package contents:"
        ls -la pkg-${{ matrix.target }}/
        
        # Check required files exist
        test -f "pkg-${{ matrix.target }}/rustreexo_wasm.js" || exit 1
        test -f "pkg-${{ matrix.target }}/rustreexo_wasm_bg.wasm" || exit 1
        test -f "pkg-${{ matrix.target }}/package.json" || exit 1
        
        echo "âœ… All required files present"
        
        # Check WASM file is not corrupted
        file pkg-${{ matrix.target }}/rustreexo_wasm_bg.wasm
        
        # Verify package.json is valid JSON
        cat pkg-${{ matrix.target }}/package.json | jq . > /dev/null
        echo "âœ… package.json is valid JSON"