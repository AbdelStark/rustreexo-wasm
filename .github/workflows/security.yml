name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --json > audit-results.json
      continue-on-error: true

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30

    - name: Check for vulnerabilities
      run: |
        if [ -s audit-results.json ]; then
          echo "⚠️ Security vulnerabilities found:"
          cargo audit
          exit 1
        else
          echo "✅ No security vulnerabilities found"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      if: matrix.language == 'rust'

    - name: Cache Rust dependencies  
      uses: Swatinem/rust-cache@v2
      if: matrix.language == 'rust'

    - name: Build Rust code
      run: cargo build --verbose
      if: matrix.language == 'rust'

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Create cargo-deny config
      run: |
        cat > deny.toml << 'EOF'
        [graph]
        targets = [
            { triple = "x86_64-unknown-linux-gnu" },
            { triple = "wasm32-unknown-unknown" },
        ]

        [licenses]
        version = 2
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause", 
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = [
            "GPL-2.0",
            "GPL-3.0",
            "AGPL-1.0",
            "AGPL-3.0",
        ]

        [[licenses.exceptions]]
        name = "ring"
        allow = ["OpenSSL"]

        [bans]
        multiple-versions = "warn"
        wildcards = "deny"
        deny = [
            # Crates with known security issues
            { name = "openssl", version = "<0.10.55" },
            { name = "rustls", version = "<0.20.0" },
        ]

        [advisories]
        version = 2
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        ignore = []
        EOF

    - name: Check licenses and advisories
      run: cargo deny check

    - name: Generate SBOM (Software Bill of Materials)
      run: |
        cargo tree --format json > cargo-tree.json
        
        # Create a simplified SBOM
        echo "# Software Bill of Materials (SBOM)" > SBOM.md
        echo "" >> SBOM.md
        echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> SBOM.md
        echo "Repository: ${{ github.repository }}" >> SBOM.md
        echo "Commit: ${{ github.sha }}" >> SBOM.md
        echo "" >> SBOM.md
        echo "## Direct Dependencies" >> SBOM.md
        echo "" >> SBOM.md
        cargo tree --depth 1 --format "{p} {l}" >> SBOM.md

    - name: Upload SBOM  
      uses: actions/upload-artifact@v4
      with:
        name: software-bill-of-materials
        path: |
          SBOM.md
          cargo-tree.json
        retention-days: 90

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build test Docker image
      run: |
        cat > Dockerfile.security-test << 'EOF'
        FROM rust:1.75-slim as builder

        WORKDIR /app
        COPY . .

        RUN apt-get update && apt-get install -y \
            pkg-config \
            libssl-dev \
            && rm -rf /var/lib/apt/lists/*

        RUN cargo build --release

        FROM debian:bookworm-slim
        RUN apt-get update && apt-get install -y \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/*

        COPY --from=builder /app/target/release/rustreexo-wasm /usr/local/bin/
        
        USER 1000:1000
        EOF

        docker build -f Dockerfile.security-test -t rustreexo-wasm-test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rustreexo-wasm-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  security-scorecard:
    name: OSSF Security Scorecard
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      security-events: write
      id-token: write
      
    steps:
    - name: Run OSSF Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload OSSF Scorecard results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif